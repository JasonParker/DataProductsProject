q5
matrix(q5)
hat(q5, intercept = TRUE)
?hatvalues
hatvalues(lm(y ~ x))
?dfbeta
dfbeta(lm(y ~ x))
fit5 <- lm(y ~ x)
hatvalues(fit5)
dfbeta(fit5)[5]
dfbeta(fit5)
plot(x, y)
plot(x, y, which = 1)
?plot
plot
?plot
?dfbeta
dfbetas(fit5)
summary(mpg ~ I(wt * .5) + factor(cyl), data = mtcars)
summary(mpg ~ I(wt * .5) + factor(cyl), data = mtcars))
summary(lm(mpg ~ I(wt * .5) + factor(cyl), data = mtcars))
?I
fit2 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2_unadjusted <- lm(mpg ~ factor(cyl), data = mtcars)
fit2$coef
fit2_unadjusted$coef
summary(lm(mpg ~ I(wt * .5) + factor(cyl), data = mtcars))
head(mtcars)
summary(lm(mpg ~ factor(am) + wt + cyl, data = mtcars))
?pairs
pairs(data = mtcars)
model1 <- lm(mpg ~ factor(am) + wt + factor(cyl), data = mtcars)
model1$coef
model2 <- model1
model1 <- lm(mpg ~ factor(am) + wt + factor(cyl) + disp, data = mtcars)
model1$coef
model1 <- lm(mpg ~ factor(am) + wt + cyl, data = mtcars)
model1$coef
model <- lm(mpg ~ factor(am) + wt, data = mtcars)
model$coef
model_all <- lm(mpg ~ ., data = mtcars)
summary(model_al)
summary(model_all)
model_all <- lm(mpg ~ factor(am) + ., data = mtcars)
summary(model_all)
model1 <- lm(mpg ~ factor(am) + wt + disp, data = mtcars)
summary(model1)
model_hmmm <- lm(mpg ~ factor(am) + wt + cyl + disp + hp, data = mtcars)
summary(model_hmmm)
model <- lm(mpg ~ factor(am) + wt + hp, data = mtcars)
summary(model)
summary(model_all)
?anova
anova(model1, model2)
resid(model2)
sum(resid(model2))
model1
model1 <- lm(mpg ~ factor(am) + wt + cyl + disp + hp, data = mtcars)
sum(resid(model1))
?mtcars
?shuttle
library("mass")
library("MASS")
?shuttle
head(shuttle)
class(shuttle$wind)
q1_model <- glm(auto ~ wind, data = shuttle, family = "binomial")
q1_model <- glm(use ~ wind, data = shuttle, family = "binomial")
summary(q1_model)
-.25131/-.03181
q1_model2 <- glm(use ~ wind + magn, data = shuttle, family = "binomial")
summary(q1_model2)
summary(q1_model2)$coef[1,1] - summary(q1_model2)$coef[2,1]
summary(q1_model2)$coef[1,1]/summary(q1_model2)$coef[2,1]
summary(q1_model2)$coef[2,1]/summary(q1_model2)$coef[1,1]
q1_model2 <- glm(use ~ wind * magn, data = shuttle, family = "binomial")
summary(q1_model2)
q1_model2 <- glm(use ~ wind + magn, data = shuttle, family = "binomial")
library("swirl")
swirl()
view(ravenData)
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family = "binomial", data = ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
summary(q1_model)
exp(coef(q1_model))
exp(coef(q1_model2))
q1_model_other <- glm(use ~ wind + 1 + mgn, data = shuttle, family = "binomial")
q1_model_other <- glm(use ~ wind + 1 + magn, data = shuttle, family = "binomial")
coef(q1_model_other)
summary(q1_model)
?shuttle
idea <- glm(use=="auto" ~ wind, family = "binomial", data = shuttle)
summary(idea)
idea2 <- glm(use=="noauto" ~ wind, family = "binomial", data = shuttle)
idea2$coef
q1_model <- glm(use=="auto" ~ factor(wind), family = "binomial", data = shuttle)
summary(q1_model)
exp(coef(q1_model))
1.285714/1.032323
1.032/1.286
q1_model(use ~ factor(wind), family = "binomial", data = shuttle)
q1_model <- glm(use ~ factor(wind), family = "binomial", data = shuttle)
exp(coef(q1_model))
.7777/.9687
summary(q1_model)
q1_model <- glm(use == "auto" ~ factor(wind), family = "binomial", data = shuttle)
exp(coef(q1_model))
1.2857/1.0323
summary(q1_model)
q1_model <- glm(factor(use) ~ factor(wind), family = "binomial", data = shuttle)
summary(q1_model)
q2_model <- glm(factor(use) ~ factor(wind) + magn, family = "binomial", data = shuttle)
exp(coef(q2_model))
.6952/.9685
summary(q1_model)
q1_model <- glm(use == "auto" ~ factor(wind), family = "binomial", data = shuttle)
exp(coef(q1_model))
q1_model <- glm(use ~ wind, family = "binomial", data = shuttle)
exp(coef(q1_model)
)
q2_model <- glm(use ~ wind + magn, family = "binomial", data = shuttle)
exp(coef(q2_model))
?InsectSprays
q4_model <- glm(count ~ factor(spray), family = "Poisson", data = InsectSprays)
?glm
q4_model <- glm(count ~ factor(spray), family = "poisson", data = InsectSprays)
exp(coef(q4_model))
14.5/1.0574713
1.0574713/14.5
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x, y)
x <- 0:5
y <- c(0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x, y)
lm(y ~ x)
summary(q4_model)
2.67/.05588
.05588/2.67
thought4 <- lm(count ~ factor(spray), data = InsectSprays)
summary(thought4)
14.5/.8333
.8333/14.5
library("AppliedPredictiveModeling", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
data(segmentationOriginal)
library(caret)
names(segmentationOriginal)
?createDataPartition
set.seed(125)
inTrain <- createDataPartition(segmentationOriginal$Case, p = .75)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
inTrain <- createDataPartition(segmentationOriginal$Case, p = .75, list = FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
?train
modelFit <- train(training, training$Case, method = "rpart")
summary(modelFit)
printcp(modelFit)
?predict
head(training)
set.seed(125)
training <- segmentationOriginal[,segmentationOriginal == "Train"]
testing <- segmentationOriginal[,segmentationOriginal == "Test"]
training <- segmentationOriginal[,segmentationOriginal$Case == "Train"]
testing <- segmentationOriginal[,segmentationOriginal$Case == "Test"]
segmentationOriginal$Case
training <- segmentationOriginal[,segmentationOriginal$Case == "Train"]
testing <- segmentationOriginal[,segmentationOriginal$Case == "Test"]
training <- segmentationOriginal[,segmentationOriginal$Case == "Train"]
training <- segmentationOriginal[segmentationOriginal$Case == "Train"]
segmentationOriginal[2,2]
segmentationOriginal[2,3]
library(dplyr)
?select
training <- select(segmentationOriginal, Case = "Train")
training <- select(segmentationOriginal, Case == "Train")
testing <- select(segmentationOriginal, Case == "Test")
class(segmentationOriginal$Case)
levels(segmentationOriginal$Case)
training <- filter(segmentationOriginal, Case == "Train")
testing <- filter(segmentationOriginal, Case == "Test")
modelFit <- train(training, training$Case, method = "rpart")
set.seed(125)
modelFit <- train(training, training$Case, method = "rpart")
head(training)
training <- training[,-3]
training <- filter(segmentationOriginal, Case == "Train")
testing <- filter(segmentationOriginal, Case == "Test")
class(training$Case)
modelFit <- train(training, training$Case, method = "rpart")
summary(training)
modelFit <- train(training, training$Class, method = "rpart")
modelFit
plot(modelFit)
plot(modelFit$finalModel, uniform = TRUE, main = "Classification Tree")
test(modelFit$finalModel, use.n = TRUE, all = TRUE, cex = .8)
text(modelFit$finalModel, use.n = TRUE, all = TRUE, cex = .8)
print(modelFit$finalModel)
modelFit <- train(Class ~ ., method = "rpart", data = training)
plot(modelFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modelFit$finalModel, use.n = TRUE, all = TRUE, cex = .8)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
modelFit3 <- train(Area ~., method = "rpart", data = olive)
?predict
newdata = as.data.frame(t(colMeans(olive)))
predict(modelFit3, newdata = newdata)
olive$Area
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
names(trainSA)
modelFit4 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm",
family = "binomial", data = trainSA)
predictedValues4 <- predict(modelFit4, newdata = testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predictedValues4)
missClass(trainSA$chd, predict(modelFit4, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
class(vowel.train$y) <- as.factor(vowel.train$y)
class(vowel.test$y) <- as.factor(vowel.test$y)
class(vowel.train$y)
View(vowel.train)
summary(vowel.train)
class(vowel.train$y)
data(vowel.train)
data(vowel.test)
class(vowel.train$y)
?factor
class(vowel.train$y) <- as.factor(vowel.train$y)
class(vowel.test$y) <- as.factor(vowel.test$y)
set.seed(33833)
modelFit5 <- train(y ~., method = "rf", data = vowel.train)
?varlmp
?varImp
varImp(modelFit5)
modelFit5 <- train(y ~., method = "randomForest", data = vowel.train)
varImp(modelFit5, useModel = TRUE)
vowel.train
summary(vowel.train$y)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
class(vowel.train$y)
set.seed(33833)
modelFit5 <- train(y ~., method = "rf", data = vowel.train)
varImp(modelFit5)
varImp(modelFit5, useModel = TRUE)
varImp(modelFit5, useModel = FALSE)
varImp(modelFit5)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
class(vowel.train$y)
vowel.train$y <- as.factor(vowel.train$y)
class(vowel.train$y)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
?train
library(caret)
?train
modelFit1 <- train(y ~., method = "rf", data = vowel.train)
modelFit2 <- train(y ~., method = "gbm", data = vowel.train)
?conf
testingSetPrediction1 <- table(predict(modelFit1, newdata = vowel.test))
testingSetPrediction2 <- table(predict(modelFit2, newdata = vowel.test))
testingSetActual <- table(vowel.test$y)
missClassVector1 <- as.vector(testingSetPrediction1 - testingSetActual)
missClassVector2 <- as.vector(testingSetPrediction2 - testingSetActual)
missClassTotal1 <- sum(abs(missClassVector1))
missClassTotal2 <- sum(abs(missClassVector2))
missClassPercent1 <- missClassTotal1/nrow(testingSet)
missClassPercent2 <- missClassTotal2/nrow(testingSet)
table(missClassPercent1, missClassPercent2)
testingSetPrediction1 <- table(predict(modelFit1, newdata = vowel.test))
testingSetPrediction2 <- table(predict(modelFit2, newdata = vowel.test))
testingSetActual <- table(vowel.test$y)
missClassVector1 <- as.vector(testingSetPrediction1 - testingSetActual)
missClassVector2 <- as.vector(testingSetPrediction2 - testingSetActual)
missClassTotal1 <- sum(abs(missClassVector1))
missClassTotal2 <- sum(abs(missClassVector2))
missClassPercent1 <- missClassTotal1/nrow(vowel.test)
missClassPercent2 <- missClassTotal2/nrow(vowel.test)
table(missClassPercent1, missClassPercent2)
library(dplyr)
?predict
predictions1 <- predict(modelFit1, newdata = vowel.test)
predictions2 <- predict(modelFit2, newdata = vowel.test)
actualResults <- vowel.test$y
testPredictions1 <- predictions1 == actualResults
testPredictions1 <- predictions1 == actualResults
testPredictions2 <- predictions2 == actualResults
table(testPredictions1)
table(testPredictions1)[,2]
table(testPredictions1)[2]
accuracy1 <- table(testPredictions1)[2]/nrow(vowel.test)
accuracy1 <- table(testPredictions1)[2]/nrow(vowel.test)
accuracy2 <- table(testPredictions2)[2]/nrow(vowel.test)
double <- testPredictions1 == testPredictions2
accuracy1 <- table(testPredictions1)[2]/nrow(vowel.test)
accuracy2 <- table(testPredictions2)[2]/nrow(vowel.test)
double.accuracy <- table(double)[2]/nrow(vowel.test)
double <- testPredictions1 == testPredictions2
double.test <- double == actualResults
double.accuracy <- table(double.test)[2]/nrow(vowel.test)
coincidingPredictions <- predictions1 == predictions2
double.accuracy <- table(testPredictions1[coincidingPredictions == TRUE])[2]/nrow(testPredictions1[coincidingPredictions == TRUE])
table(testPredictions1[coincidingPredictions == TRUE])[2]
numberUnequal <- table(testPredictions1[coincidingPredictions == FALSE])[2]
testPredictions1[coincidingPredictions = TRUE]
testPredictions1[coincidingPredictions]
testPredictions1(coincidingPredictions)
predictions1[coincidingPredictions]
testCoinciding <- predictions1[coincidingPredictions] == actualResults
testCoinciding <- predictions1[coincidingPredictions] == actualResults[coincidingPredictions]
accuracyCoinciding <- table(testCoinciding)[2]/length(testCoinciding)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modelFitRF <- train(diagnosis ~., method = "rf", data = training)
modelFitGBM <- train(diagnosis ~., method = "gbm", data = training)
modelFitLDA <- train(diagnosis ~., method = "lda", data = training)
predictionsRF <- predict(modelFitRF, newdata = testing)
predictionsGBM <- predict(modelFitGBM, newdata = testing)
predictionsLDA <- predict(modelFitLDA, newdata = testing)
predDF <- data.frame(predictionsRF,
predictionsGBM,
predictionsLDA,
diagnosis)
stackedModelFit <- train(diagnosis ~., method = "rf", data = predDF)
predictionsStacked <- predict(stackedModelFit, newdata = testing)
confusionMatrix(table(predictionsStacked, diagnosis))
length(predictionsGBM)
length(predictionsRF)
length(predictionsLDA)
predDF <- data.frame(predictionsRF,
predictionsGBM,
predictionsLDA,
testing$diagnosis)
stackedModelFit <- train(diagnosis ~., method = "rf", data = predDF)
predictionsStacked <- predict(stackedModelFit, newdata = testing)
confusionMatrix(table(predictionsStacked, diagnosis))
names(predDF)
stackedModelFit <- train(testing.diagnosis ~., method = "rf", data = predDF)
predictionsStacked <- predict(stackedModelFit, newdata = testing)
confusionMatrix(table(predictionsStacked, diagnosis))
confusionMatrix(table(predictionsStacked, testing$diagnosis))
confusionMatrix(table(predictionsStacked, testing$diagnosis))$accuracy
confusionMatrix(table(predictionsStacked, testing$diagnosis))$Accuracy
confusionMatrix(table(predictionsRF, testing$diagnosis))
confusionMatrix(table(predictionsGBM, testing$diagnosis))
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
names(training)
set.seed(233)
modelFitLASSO <- train(CompressiveStrength ~., method = "lasso", data = training)
?plot.enet
plot(modelFitLASSO, xvar=penalty)
plot(modelFitLASSO, xvar = "penalty")
?plot.enet
modelFitLASSO
summary(modelFitLASSO)
modelFitLASSO$tuneValue
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
?bats
install.packages("forecast")
library(forecast)
?bats
modelFit <- bats(tstrain)
predict(modelFit, testing$visitsTumblr)
?accuracy
accuracy(modelFit, tstrain)
modelFit
predict(modelFit, testing$visitsTumblr)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modelFit <- train(CompressiveStrength ~., method = "svm", data = training)
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
modelFit <- train(CompressiveStrength ~., method = "svm", data = training)
set.seed(325)
modelFit <- svm(CompressiveStrength ~., data = training)
predict(modelFit, newdata = testing)
predictions <- predict(modelFit, newdata = testing)
RMSE <- sqrt( sum( (predictions - testing$CompressiveStrength)^2 , na.rm = TRUE ) / nrow(testing) )
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='jasonparker', token='D28050932D299D11C9185CD6369D5805', secret='pMklt3HIjFKm3LWDvJG9dfiz6+uLHPXeku30I0cD')
shinyapps::setAccountInfo(name='jasonparker', token='D28050932D299D11C9185CD6369D5805', secret='pMklt3HIjFKm3LWDvJG9dfiz6+uLHPXeku30I0cD')
library('devtools')
install.github('slidify', 'ramnathv')
install_github('slidify', 'ramnathv')
?author
install.packages("RPublica")
?nporg
library("RPublica")
?nporg
?np_org
data <- np_org(ein = "62-0550979")
data <- np_org(ein = "620550979")
data
library("RPublica")
np_org(ein = "620550979")
NSO <- np_org(ein = "620550979")
NSO$api_version
NSO$organization$accounting_period
MN <- np_search("Minnesota Orchestra")
MN
MN <- np_search("Minnesota Orchestra", state = "MN")
MN
names(NSO)
NSO$organization
?mtcars
?shiny
?rnorm
?sample
getwd()
setwd("~/Desktop/Coursera/DataProductsProject")
getwd()
runApp()
?runApp
library("shinyapps", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
runApp()
detach("package:shinyapps", unload=TRUE)
install.packages("shiny")
librar("shiny")
library("shiny")
runApp()
runApp()
runApp("DataProductsProject")
getwd()
list.files(getwd())
list.files(getwd())
runApp("Project-App")
vector <- c(1:100)
vector <- c(0:100)
mean(vector)
?sample
runApp()
..
runApp("Project-App")
runApp("Project-App")
?selectInput
runApp("Project-App")
runApp("Project-App")
runApp("Project-App")
x[1] <- (1,2,3)
x <- c(1:2)
x[1]
runApp("Project-App")
runApp("Project-App")
runApp("Project-App")
?sample
runApp("Project-App")
runApp("Project-App")
runApp("Project-App")
runApp("Project-App")
runApp("Project-App")
runApp("Project-App")
runApp("Project-App")
runApp("Project-App")
?outputVerbatimText
?outputVerbatimText
runApp("Project-App")
runApp("Project-App")
